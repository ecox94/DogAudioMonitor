package com.example.androidaudiorecorder;



/**
 * Application: DogAudioMonitor
 * Component: Event Tagging
 *
 *
 * This class is an Activity in which the user can play back and tag all events genrated by
 * the WavFileEventFilterActivity. All tagged evetns will be utilized by the monitor to compare live audio.
 * Unlike other Acitivity classes, this class has a programatic layout.
 *
 * @author Emma Cox
 *
 *
 */
import android.content.Context;
import android.content.Intent;
import android.media.MediaPlayer;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;


import android.view.View;
import android.widget.Button;

import android.widget.LinearLayout;
import android.widget.ScrollView;
import android.widget.TextView;
import android.widget.Toast;

import java.io.File;
import java.util.ArrayList;

public class EventTaggingActivity extends AppCompatActivity {

    //Used for user to play-back events
    private MediaPlayer player = new MediaPlayer();

    //Used to create an An ArrayList of tag Wavs
    private static ArrayList<File> taggedWav = new ArrayList<File>();

    //Used to create an ArrayList of tagged Wav File names
    private static ArrayList<String> taggedNames = new ArrayList<>();

    private Context context = EventTaggingActivity.this;




    @Override
    /**
     * When Activity is Activated during application run
     *
     * Layout for this Activity is programatically created from Activity and does not include an associated xml layout file.
     *This is due to the fact that the layout is highly dependent on the amount of wav files gernerated
     * from the WavEventFilterActivity
     *
     */
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        //Gets the amount of events generated by previous Activity
        int eventNo = getIntent().getExtras().getInt("size");

        //button to play back event
        Button buttonPlay;

        //button to tag event
        Button buttonTag;

        //button to submit tagged events

        Button buttonFinish;

        //ScrollView layout allows the layout view hierarchy placed within it to be scrolled (Allows for dynamic amount of buttons)
        ScrollView scrollview = new ScrollView(this);

        //Linear Layout within Scroll View to place content.
        LinearLayout linearlayout = new LinearLayout(this);
        linearlayout.setOrientation(LinearLayout.VERTICAL);

        //Layout for intstructions text view
        LinearLayout instructions = new LinearLayout(this);
        instructions.setOrientation(LinearLayout.VERTICAL);
        TextView instructionsText = new TextView(this);
        instructionsText.setText("Play back and tag any Audio Event you would like the monitor to recognise");

       //Adds linearLayout to scrollview
        scrollview.addView(linearlayout);

        //Provides play buttons with unique ID and correct text value for play button.
        int eventID =0;



        //Adds A new Play button and Tag button for every Event
        for(int i = 0; i<eventNo;i++) {
            eventID = i+1;
            LinearLayout buttonView = new LinearLayout(this);
            buttonView.setOrientation(LinearLayout.HORIZONTAL);
            buttonView.setHorizontalGravity(100);

            //Adds to parent layout
            linearlayout.addView(buttonView);

            //Couldn't get margins or padding to work programatically, had to use TextViews to act as padding
            TextView playButtonPadding = new TextView(this);

            //New play button for every event
            buttonPlay = new Button(this);

            //New tag button for every event
            buttonTag = new Button(this);

            //Couldn't get margins or padding to work programatically, had to use TextViews to act as padding
            TextView tagButtonPadding = new TextView(this);


            //Sets text on button
            buttonPlay.setText("Play Event "+eventID);
            playButtonPadding.setText("");
            buttonTag.setText("Tag Event "+eventID);
            tagButtonPadding.setText("");

            //Set padding dimensions between buttons
            playButtonPadding.setPadding(0,50,0,0);
            tagButtonPadding.setPadding(0,50,0,0);

            //Set buttons min and max widith
            buttonPlay.setMaxWidth(300);
            buttonPlay.setMinWidth(300);
            buttonTag.setMaxWidth(300);
            buttonTag.setMinWidth(300);



            //Adds buttons and their assoiciatzed padding dimensions to layout
            buttonView.addView(buttonPlay);
            buttonView.addView(playButtonPadding);
            buttonView.addView(buttonTag);
            buttonView.addView(tagButtonPadding);


            //Event filename
            final  String filename = "event"+eventID;


            //Event filePath

            final String filePath = "/data/data/com.example.androidaudiorecorder/files/"+filename+".wav";

            //Plays WavFile
            buttonPlay.setOnClickListener(new View.OnClickListener() {

                @Override
                public void onClick(View v) {
                    // TODO Auto-generated method stub
                    playEvent(filePath);

                }
            });

            //Adds wav FIle to arraylist
            buttonTag.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    tagEvent(filePath, filename, context);


                }
            });
        }

        //Final layout used for finish button
        LinearLayout finishButtonView = new LinearLayout(this);

        //button used to finsih Activity
        buttonFinish = new Button(this);

        //Set buttons min and max widith and min Height
        buttonFinish.setMinWidth(600);
        buttonFinish.setMinWidth(600);
        buttonFinish.setMinHeight(100);

        buttonFinish.setText("Finish");

        //Couldn't get margins or padding to work programatically, had to use TextViews to act as padding
        TextView padding3 = new TextView(this);
        padding3.setText("");

        //Padding dimensions
        padding3.setPadding(0,50,0,0);

        //Adds buttons and their assoiciaed padding dimensions to layout
        finishButtonView.addView(padding3);
        finishButtonView.addView(buttonFinish);

        //Adds to parent layout
        linearlayout.addView(finishButtonView);


        //Checks if at least one event has been tagged by user before proceeding to next activity
        buttonFinish.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v)
            //Error handling if user tries to proceed without tagging at least one event.
            {
                if (taggedWav.size() == 0 ) {
                    Toast.makeText(context, "Please tag at least 1 event to proceed", Toast.LENGTH_LONG).show();
                }else{
                    startActivity(context);

                }
            }
        });

        this.setContentView(scrollview);
    }


    /**
     * Plays event
     * @param filePath
     */
    public  void playEvent(String filePath) {
        try {
            player.reset();
            player.setDataSource(filePath);
            player.prepare();
            player.start();
        } catch (IllegalArgumentException e) {
            e.printStackTrace();
        } catch (Exception e) {
            System.out.println("Exception of type : " + e.toString());
            e.printStackTrace();
        }



    }


    /**
     * User tags events in Arraylist
     * @param filepath
     * @param fileName
     * @param ctx
     */
    public static void tagEvent(String filepath, String fileName, Context ctx){
        try{
            if (taggedNames.contains(fileName)){
                Toast.makeText(ctx, fileName + " Already tagged  ",  Toast.LENGTH_LONG).show();

            }else {
                File file = new File(filepath);
                taggedWav.add(file);
                Toast.makeText(ctx, fileName + " added ", Toast.LENGTH_LONG).show();
                taggedNames.add(fileName);
            }
        }catch (Exception e) {
            System.err.println(e);
        }
    }

    /**
     * Starts next activity
     * Passes ArrayList of tagged wavs to activity/
     * @param context
     */
    public   void startActivity(Context context){
        Toast.makeText(context, taggedWav.size() + " tagged events ", Toast.LENGTH_LONG).show();

        Intent intent = new Intent(EventTaggingActivity.this, UserSettingsActivity.class);

        intent.putExtra("taggedwavs", taggedWav);
        startActivity(intent);

    }


}
